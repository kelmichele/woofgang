ORIGINAL EXPORT CODE - LOC.RB -- replaced it with the version supporting tags
	def self.to_csv(options = {})
	  # slug, og_state
	  desired_columns = ["id", "store_name", "email_address", "phone", "street_address_one", "street_address_two", "city", "state_id", "zip", "fb", "insta", "twitter", "yelp", "site", "hours", "latitude", "longitude", "coming_soon"]
	  CSV.generate(options) do |csv|
	    csv << desired_columns
	    all.each do |location|
	      csv << location.attributes.values_at(*desired_columns)
	    end
	  end
	end




STOCKIST IMPORT STOPS AT THE WOODLANDS. THE NEXT IMPORT SHOULD START WITH THORNTON.

IF YOU WANT TO DO A BLOG'S RECENT POSTS WITH BG IMAGES LIKE THE INDEX PAGE:
	.rtitle { @include sec-default(); font-size: 15px; color:$tbrown;}
  .image{background-color:$white; background-size:cover; background-repeat:no-repeat; background-position: center center;
    height:250px;
  }
    
	<% recent.each do |recent| %>
		<style type="text/css">
			.rpost.rpost-<%= recent.id %> .image {
				<% if recent.image.attached? %>
					background-image: url(<%= rails_blob_url(recent.image) %>);
					<% else %>
					background-image: url(/assets/blog-recent.png);
				<% end %>
			}
		</style>

		<%= link_to recent.slug, class: "rpost rpost-#{recent.id}" do %>
		  <div class="image"></div>
		  <div class="rtitle">
				<%= recent.title %>
			</div>
		<% end %>
	<% end %>




# if Rails.env.production? end



IF ADDING FONTS INTO APP:
	STATIC_PAGES.SCSS---
		// .woof-link, .text-link {font-family: $helv;}
    // b {font-family: $helv;}

		// TRY
		// .home .page-body {
		//   h1, h3, h4 {font-family: $helv;}
		// }
		// else
		// .home .nlay-intro h1{font-family: $helv;}
		// .home.bg-sec.ff h4{font-family: $helv;}
		// .home .nlay-logos h3 {font-family: $helv;}

		// .locations.index, .states.show {
		  // .searcher,.filter-box{font-family: $helv;}
		  // .location-bx .cat{font-family: $helv;}
		// }
		// .locations.show .cat {font-family: $helv;}
		// .locations.show .title {font-family: $helv;}

		// .services-layout .list-box h4 {font-family:$helv;}

		//.posts.index, .blog .post-li h3 {font-family:$helv;}

		//.contacts .cbody h4{font-family: $helv;}

		// TRY
		// label, select{font-family: $helv;}
		//else
		// .estates, .reporters, .vendors {font-family: $helv;
			h3{font-family: $helv;}
		}

	
	FRANCHISE_PAGES.SCSS ---
		(might be more)
		// .franchise-layout.fl2 .col h4{font-family: $helv;}
		// .franchise-layout.fl1 .content-layout .full.fw p.sig{font-family: $helv;}

	
	HEAD_FOOT.SCSS ---
		// .footer-level h5 {font-family:$helv;}

LOCATION STATE COUNTS:
	ct = Location.where(state_id: 1) -- 1
	fl = Location.where(state_id: 2) -- 42
	ga = Location.where(state_id: 3) -- 7
	ks = Location.where(state_id: 4) -- 3
	nc = Location.where(state_id: 5) -- 11
	nj = Location.where(state_id: 6) -- 6
	nv = Location.where(state_id: 7) -- 2
	ny = Location.where(state_id: 8) -- 1
	sc = Location.where(state_id: 9) -- 5
	tn = Location.where(state_id: 10) -- 2
	tx = Location.where(state_id: 11) -- 21
	va = Location.where(state_id: 12) -- 3

FAKE Locations
	new = Location.new(street_address_one: "13701 Perdido Key Dr", city: "Pensacola", state_id: 2, zip: "32507", phone: "1234567", latitude: 30.2964886, longitude: -87.4313131, store_name: "WGB Temporary", email_address: "temp@wgb.com", hours: "This is not a real store, created for testing", slug: "wgb-temporary", coming_soon: true)

maxmemory 5mb
maxmemory-policy allkeys-lru

redis-server /config/redis.conf


heroku addons:info redistogo



heroku redis:maxmemory redis-cylindrical-10912 --policy allkeys-lru
heroku redis:maxmemory redis-cylindrical-10912 5mb


HELPFUL 
	"OB: 107.167.195.186"
	"ORL: 192.96.192.142"
	"NC: 174.110.241.123"
	"GS: 173.20.21.212"

LOCATIONS WITH ANOM. NAMES:
	<!-- Landstar --> X
	<!-- Lakeside Village --> X
	√ <!-- Conway --> X
	<!-- Thornton Park -->
	<!-- Lake Nona -->
	<!-- Downtown Winter Park --> --
	<!-- Waterford Lakes --> --
	<!-- Sumter  -->
	<!-- South Tampa -->
	<!-- St. Armands -->
	<!-- Nocatee -->
	<!-- Avondale --> --
	<!-- Abacoa -->
	<!-- Yamato --> √
	~ Bal Harbour Square --
	-- Starland
	<!-- Bull Street -->
	-- City Market
	<!-- Saint Julian --> --
	<!-- River Street -->
	<!-- South Park --> --
	<!-- Wakefield --> --
	<!-- West U --> --
	<!-- The Woodlands -->
	<!-- Cedar Park --> √
	<!-- Westlake --> -- X
	<!-- Circle C --> -- √
	<!-- Bee Cave  --> √
	<!-- Stone Oak --> √


IF WE WANT TO USE PLUGIN (STOCKIST/STORE ROCKET) WITH STATES MAP:
	_list:
		<!-- change state pagy to at least 60 for this layout. -->
		<div id="servFilters" class="withFilter" uk-filter="target: .js-filter">
			<ul class="filterList">
			  <!-- <li class="all uk-active" data-uk-filter-control="[data-tags*='all']">
			  	<a href="#">All</a>
			  </li> -->
				<!-- <li uk-filter-control>All</li> -->
			  <li class="retail" uk-filter-control="[data-tags*='retail']">
			  	<!-- <label>Retail</label> -->
			  	<a href="#"><input class="uk-checkbox" type="checkbox"><label>Retail</label></a>
			  </li>
			  
			  <li class="grooming" uk-filter-control="[data-tags*='grooming']">
			  	<input class="uk-checkbox" type="checkbox">Grooming
			  	<!-- <a href="#"><input class="uk-checkbox" type="checkbox">Grooming</a> -->
			  </li>
			  
			  <li class="self-service-grooming" uk-filter-control="[data-tags*='self-service-grooming']">
			  	<a href="#"><input class="uk-checkbox" type="checkbox">Self-Service Grooming</a>
			  </li>
			  
			  <li class="doggie-daycare" uk-filter-control="[data-tags*='doggie-daycare']">
			  	<a href="#"><input class="uk-checkbox" type="checkbox">Day Care &amp; Pet Resort</a>
			  </li>

			  <li class="veterinary-clinic" uk-filter-control="[data-tags*='veterinary-clinic']">
			  	<a href="#"><input class="uk-checkbox" type="checkbox">Wellness Clinic</a>
			  </li>
			</ul>

		--- this before for each ---
		<ul class="js-filter">
			<li class="location-bx" data-tags="<%= location.tag_class %>">



LOCATION PAGE:
	- if we start having problems with socials
	<% if location.fb != nil %>
		<!-- if we start having issues< if location.fb.size > 1 %> -->
		<p><%= location.fb %> - <%= location.fb.size %></p>
	<% end %>

OG STATES/SHOW TABLE

	<%= tag.div id: "locations-list", data: { locations: @locations.to_json(methods: [:address]), l: params[:state] } do %>
		<table>
			<% @locations.each do |location| %>
				<div class="location-bx">
					<%= link_to location_path(location) do %>
						<div class="cat name">
							<%= location.ntitle.titleize %>
							<% if location.coming_soon?  %>
								(Coming Soon)
							<% end %>
						</div>
					<% end %>

					<div class="cat address">
						<%= location.street_address_one %><% if location.street_address_two %>,
						<span class="addr"><%= location.street_address_two %></span>
						<% end %>
						<br><%= location.city %>, <%= location.state.name %> <%= location.zip %>
					</div>

					<div class="cat phone"><a href="tel:<%= location.phone %>"><%= number_to_phone(location.phone, delimiter: '-') %></a></div>

					<div class="cat email">
						<a href="mailto:<%= location.email_address %>"><span uk-icon="icon: mail;"></span></a>

						<% if location.fb && location.fb.size > 1 %>
							<a href="https://www.facebook.com<%= location.fb %>" target="_blank"><span class="linkcon" uk-icon="icon: facebook;"></span></a>
						<% end %>

						<% if location.insta && location.insta.size > 1 %>
							<a href="https://www.instagram.com<%= location.insta %>" target="_blank"><span class="linkcon" uk-icon="icon: instagram;"></span></a>
						<% end %>

						<% if location.twitter && location.twitter.size > 1 %>
							<a href="https://twitter.com<%= location.twitter %>" target="_blank"><span class="linkcon" uk-icon="icon: twitter;"></span></a>
						<% end %>
					</div>

					<div class="cat tags">
						<span>Store Services:</span><br>
						<% if location.tags.count > 0 %>
							<% location.tag_split.each do |tag| %>
								<button class="tag-icon <%= tag %>" uk-tooltip="<%= tag.titleize %>">
									<span class="tag-img"></span>
								</button>
							<% end %>
						<% end %>
					</div>

					<div class="btn-row">
						<%= link_to "Store Details", location_path(location), class: 'woof-link' %>
						<a href="<%= location.direct_link %>" target="_blank" class="woof-link dir">Directions </a>
					</div>


	    		<% if user_signed_in? && current_user.admin? %>
						<% if location.longitude == nil %><div class="actions">**<small>Coordinates Missing**</small></div><% end %>
					<% end %>
				</div>
			<% end %>
		</table>
	<% end %>

	<%= will_paginate @locations, remote: true %>


LOCATIONS EXTRAS
	<!--direct link
	https://www.google.com/maps/dir//Woof+Gang+Bakery+Bull+Street,+137+Bull+St,+Savannah,+GA+31401/data=!4m6!4m5!1m1!4e2!1m2!1m1!1s0x88fb9e660dc0f667:0xb3567427d5164e7b?ved=2ahUKEwjRxMH3xsDeAhXJzFMKHQ5cC7MQ48ADMAR6BAgBEDM
	-->

	<!-- my link
	https://www.google.com/maps/
	dir//Woof+Gang+Bakery+Bull+Street,+137+Bull+St,+Savannah,+GA+31401/@32.0775519,-81.1627136,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x88fb9e660dc0f667:0xb3567427d5164e7b!2m2!1d-81.0926734!2d32.0775712
	-->


	heroku config:set  REDISTOGO_URL=redis://redistogo:f60167df7479ead015249116b05ac2f4@spinyfin.redistogo.com:11064/
	heroku config:set  REDIS_URL=redis://redistogo:f60167df7479ead015249116b05ac2f4@spinyfin.redistogo.com:11064/
	unset.   get


	Box: pk.eyJ1Ijo
	ia3BhcnJpcyIsImEiOiJjanZ
	mZjQ1aXEwYmZzM3l0aDloeXBmaHlmIn0.W7P-
	rQHcELL4wogzYSKu9g


LOCATIONS PAGE BODY BEFORE SWITCHING TO ROCKET
	<div class="full-search">
		<div class="full listings">
			<div class="search-sec">
				<div class="inside lg">
					<div class="searcher">
						<%= form_with(url: locations_path, class: "form-inline", local: true, method: :get) do |f| %>
						  <%= f.text_field :near, class: "form-control", placeholder: "Search by city and state, or zip" %>

						  <%= f.select(:proximity) do %>
						    <% [['20 mi', '20'], [ '30 mi', '30']].each do |c| -%>
						      <%= content_tag(:option, c.first, value: c.last) %>
						    <% end %>
						  <% end %>


						  <%= f.submit "", class: "btn btn-outline-secondary search" %>
						<% end %>
					</div>

	      	<div class="boundary-align uk-panel filter-box states">
	    	    <div class="filter-uk">Search by State <span  uk-icon="icon: chevron-down;"></span></div>
	    	    <div uk-dropdown="mode: click; pos: bottom-right; boundary: .filter-uk;">
	    	    	<% @states.each do |state| %>
	    					<div class="filter-tag <%= state.full_name %>">
	    						<%= link_to "#{state.full_name}", state_path(state) %>
	    					</div>
	    				<% end %>
	        	</div>
	        </div>

	        <div class="boundary-align uk-panel filter-box">
				    <div class="filter-uk">Search by Service <span  uk-icon="icon: chevron-down;"></span></div>
				    <div uk-dropdown="mode: click; pos: bottom-right; boundary: .filter-uk;">
				    	<% @tags.each do |tag| %>
								<div class="filter-tag">
									<span class="tag-icon <%= tag.name %>"></span>
									<%= link_to "#{tag.display_name}", tag_path(tag.name) %>
								</div>
							<% end %>
			    	</div>
			    </div>
			  </div>
			</div>

			<div class="map">
		    <%= tag.div nil, id: 'map' %>
			</div>

			<div class="loclist">
				<div class="inside">
					<p id="result-info"></p>

					<%= render partial: "list" %>
				</div>
			</div>

		</div>
	</div>



LOCATIONS_CONTROLLER pointa/old index logic rmv 5/30...
	def OLDindex
		pointa = get_user_location
		@user_lng = pointa["longitude"]
    @user_lat = pointa["latitude"]
   	crds = [@user_lat, @user_lng]

   	uip = request.remote_ip
   	gon.user_station = uip

		@states = State.all
    nearbys = Location.near(params[:q], 20, :order => "distance")
    neighbors = Location.near(crds, 100, :order => "distance")
    # 60

		@locations = if params[:l]
			# JUST FOR REDO SEARCH
	    sw_lat, sw_lng, ne_lat, ne_lng = params[:l].split(",")
	    center   = Geocoder::Calculations.geographic_center([[sw_lat, sw_lng], [ne_lat, ne_lng]])
	    distance = Geocoder::Calculations.distance_between(center, [sw_lat, sw_lng])
	    box      = Geocoder::Calculations.bounding_box(center, distance)
	    Location.within_bounding_box(box)

	  elsif params[:near]
	  	# for type search
	    # Location.near(params[:near], 20, :order => "distance").paginate(:page => params[:page], :per_page => 9)
	    Location.near(params[:near], params[:proximity], :order => "distance")

	  elsif params[:tag]
	    #ADDED ORDER, 3/12
	    Location.tagged_with(params[:tag]).near([@user_lat, @user_lng], 1200, :order => "distance")
	    # Location.near([@user_lat, @user_lng], 60, select: "locations.*, tags.*").joins(:tags).paginate(:page => params[:page], :per_page => 9)

	  else
		  # neighbors.all.paginate(:page => params[:page], :per_page => 110)
		  if user_signed_in? && current_user = boss_admin
		    Location.near(crds, 400, :order => "distance")
		  else 
		    Location.near(crds, 100, :order => "distance")
		  end
		end
    @pagy, @locations = pagy(@locations, items: 9)

		@tags = Tag.find(9,1,2,3,0)


		# @locCount = Location.all.count
		gon.result_info = if params[:near]
			# search
			'location(s) within ' + params[:proximity] + ' miles of <b>"' + params[:near] + '"</b>'
		else
			" "
		end

		

		respond_to do |format|
		  format.html
		  format.csv { send_data @locations.to_csv }
		end
	end

	private -
		def get_user_location
		  ip_address = request.remote_ip
	  	# ip_address = "192.96.192.142"
	  	# ip_address = Net::HTTP.get(URI("https://ipapi.co/ip/"))
	    Pointa.get_pointa ip_address
	  end